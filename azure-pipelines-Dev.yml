# Xcode
# Build, test, and archive an Xcode workspace on macOS.
# Add steps that install certificates, test, sign, and distribute an app, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/xcode

trigger:
  branches:
    include:
    - master

pool:
  vmImage: 'macos-13'

variables:
  - name: bundleIdMainApp
    value: 'com.7peakssoftware.cinerater.CineRater'
  - name: profileUUIDMainApp
    value: 'bd46b52f-681e-4ed5-a885-888feb2fd660'
  - name: latestBuildNumber  
    value: $[counter('DEV', 100)]
  - name: teamId
    value: 'YE28Y3LX8V'

steps:
- task: InstallAppleCertificate@2
  displayName: "Install an Apple certificate required to build on a macOS agent machine"
  inputs:
    certSecureFile: 'YE28Y3LX8V.p12'
    certPwd: '7Peaks!'
    keychain: 'temp'

- task: InstallAppleProvisioningProfile@1
  displayName: "Install an Apple provisioning profile required to build on a macOS agent machine"
  inputs:
    provisioningProfileLocation: 'secureFiles'
    provProfileSecureFile: 'CineRater.mobileprovision'

- task: PowerShell@2
  displayName: 'Install tools'
  inputs:
    targetType: 'inline'
    script: |
      brew install rswift && bundle install

#- task: PowerShell@2
#  displayName: 'Unit test & Code coverage'
#  inputs:
#    targetType: 'inline'
#    script: |
#      bundle exec fastlane generate_code_coverage

#- task: SonarCloudPrepare@1
#  displayName: 'Prepare SonarCloud analysis configuration'
#  inputs:
#    SonarCloud: 'CineRater_Service'
#    organization: 'sawpyaeyadanar'
#    scannerMode: 'CLI'
#    configMode: 'file'

#- task: SonarCloudAnalyze@1

#- task: SonarCloudPublish@1
#  inputs:
#    pollingTimeoutSec: '300'

- task: PowerShell@2
  displayName: 'Update the build number'
  inputs:
    targetType: 'inline'
    script: |
      cd App && xcrun agvtool new-version -all '$(latestBuildNumber)'


- script: |
    COMMIT_MESSAGES=$(git log --pretty=%B)
    echo "##vso[task.setvariable variable=RELEASE_NOTES;isOutput=true]$COMMIT_MESSAGES"
  displayName: 'Extract Commit Messages'


- script: |
      echo "Commit Messages: $(COMMIT_MESSAGES)"
      # Use COMMIT_MESSAGES in your subsequent tasks
  displayName: 'Display Commit Messages'

- task: PowerShell@2
  displayName: 'Build exportOptions.plist file'
  inputs:
    targetType: 'inline'
    script: |
      /usr/libexec/PlistBuddy -c "Add :method string app-store" $(Pipeline.Workspace)/exportOptions.plist &&
      /usr/libexec/PlistBuddy -c "Add :provisioningProfiles dict" $(Pipeline.Workspace)/exportOptions.plist &&
      /usr/libexec/PlistBuddy -c "Add :provisioningProfiles:$(bundleIdMainApp) string $(profileUUIDMainApp)" $(Pipeline.Workspace)/exportOptions.plist &&
      /usr/libexec/PlistBuddy -c "Add :signingCertificate string $(APPLE_CERTIFICATE_SIGNING_IDENTITY)" $(Pipeline.Workspace)/exportOptions.plist &&
      /usr/libexec/PlistBuddy -c "Add :signingStyle string manual" $(Pipeline.Workspace)/exportOptions.plist &&
      /usr/libexec/PlistBuddy -c "Add :teamID string $(teamId)" $(Pipeline.Workspace)/exportOptions.plist

- task: Xcode@5
  displayName: 'Use this task to build, test, or archive an Xcode workspace on macOS, and optionally package an app.'
  inputs:
    actions: 'clean'
    configuration: 'Release DEV'
    sdk: 'iphoneos'
    xcWorkspacePath: 'CineRater/CineRater.xcodeproj'
    scheme: 'CineRater DEV'
    xcodeVersion: '15'
    packageApp: true
    exportPath: 'output/Archive'
    exportOptions: 'plist'
    exportOptionsPlist: '$(Pipeline.Workspace)/exportOptions.plist'
    signingOption: 'default'
    args: '-skipPackagePluginValidation'

- task: CopyFiles@2
  inputs:
    SourceFolder: '$(system.defaultworkingdirectory)'
    Contents: '**/*.ipa'
    TargetFolder: '$(build.artifactStagingDirectory)'
    flattenFolders: true

- task: PublishBuildArtifacts@1

- task: Bash@3
  displayName: 'Generate a release note'
  inputs:
    targetType: 'inline'
    script: |
      CHANGES=`git log -1 --pretty=%B`
      echo "$CHANGES" > $(Pipeline.Workspace)/release_note.txt
      
- task: AppStoreRelease@1
  inputs:
    authType: 'ApiKey'
    apiKeyId: '79QNQLY6YM'
    apiKeyIssuerId: '69a6de8b-02be-47e3-e053-5b8c7c11a4d1'
    apitoken: 'LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JR1RBZ0VBTUJNR0J5cUdTTTQ5QWdFR0NDcUdTTTQ5QXdFSEJIa3dkd0lCQVFRZ1B4bnJBaWRlM3FiYmxTbGgKQXFXTW41dGN0Ump3R21nd0xiWC9NU09relVhZ0NnWUlLb1pJemowREFRZWhSQU5DQUFRNlkxNE05WUZ0MUdlVgplMnpMbEJ5ellneTNYN1YwWVloVGYwM1pmMzVHclRSSTBqMXZKYmczZUVQRjdRVzM2cW9BLzlmRVEzZGdaMzZJCkFnajVlV3c2Ci0tLS0tRU5EIFBSSVZBVEUgS0VZLS0tLS0='
    releaseTrack: 'TestFlight'
    appType: 'iOS'
    releaseNotes: '$(RELEASE_NOTES)'
    shouldSkipWaitingForProcessing: true
    shouldSkipSubmission: true
