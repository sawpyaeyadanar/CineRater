# Xcode
# Build, test, and archive an Xcode workspace on macOS.
# Add steps that install certificates, test, sign, and distribute an app, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/xcode

trigger:
  branches:
    include:
    - master
    - develop

pool:
  vmImage: 'macos-13'

variables:
- name: appStoreAPIKey
  value: 'W5T9AN5F9U'

- name: appStoreAPIKeyIssuerID
  value: '69a6de8b-02be-47e3-e053-5b8c7c11a4d1'

- name: bundleIdMainApp
  value: 'com.7peakssoftware.cinerater.CineRater'
  
- name: profileUUID
  value: '0B25D017035A3F9A9FDB399F3F5FB45282452ED9'

- name: teamId
  value: 'YE28Y3LX8V'



steps:
- script: |
   xcodebuild -showsdks
   
   echo "=====================XCode Path ============================"
   
   sudo xcode-select -switch /Applications/Xcode.app/Contents/Developer
   
   xcodebuild -showsdks
  displayName: 'Command Line Script'

- task: InstallAppleCertificate@2
  displayName: "Install an Apple certificate required to build on a macOS agent machine"
  inputs:
    certSecureFile: 'CineRaterCertificates.p12'
    keychain: 'temp'
    deleteCert: true
    
- task: InstallAppleProvisioningProfile@1
  displayName: "Install an Apple provisioning profile required to build on a macOS agent machine"
  inputs:
    provisioningProfileLocation: 'secureFiles'
    provProfileSecureFile: 'CineRater.mobileprovision'
    removeProfile: true

#- task: PowerShell@2
#  displayName: 'Unit test & Code coverage'
#  inputs:
#    targetType: 'inline'
#    script: |
#      fastlane generate_code_coverage

#- task: CmdLine@2
#  inputs:    
#    script: |
#      echo "Build iOS app"
#      cd $(Build.SourcesDirectory)
#      
#      /usr/bin/xcodebuild -sdk $(sdkOption) -configuration $(configurationOption) -workspace $(workspaceName) -scheme "$(schemeName)" build -allowProvisioningUpdates CODE_SIGN_STYLE=Manual CODE_SIGN_IDENTITY="$(signingIdentity)" APP_PROFILE="$(APP_PROFILE_ID)"  EXTENSION_PROFILE="$(APP_EXT_PROFILE_ID)"
#  displayName: 'Xcode Buid'

#- task: CmdLine@2
#  inputs:    
#    script: |
#      echo "Archive the iOS app"
#      cd $(Build.SourcesDirectory)
#      
#      /usr/bin/xcodebuild -sdk $(sdkOption) -configuration $(configurationOption) -workspace $(workspaceName) -scheme "$(schemeName)" archive -allowProvisioningUpdates CODE_SIGN_STYLE=Manual CODE_SIGN_IDENTITY="$(signingIdentity)" APP_PROFILE="$(APP_PROFILE_ID)"  EXTENSION_PROFILE="$(APP_EXT_PROFILE_ID)" -archivePath $(ArchivePath)
#  displayName: 'Xcode Archive'

#- task: CmdLine@2
#  inputs:    
#    script: |
#      /usr/bin/xcodebuild -exportArchive -archivePath $(ArchivePath) -exportOptionsPlist $(Build.SourcesDirectory)/MyApplication-Info.plist  -exportPath $(ExportIpaPath)
#  displayName: 'Xcode Export'

- task: PowerShell@2
  displayName: 'Build exportOptions.plist file'
  inputs:
    targetType: 'inline'
    script: |
      /usr/libexec/PlistBuddy -c "Add :method string app-store" $(Pipeline.Workspace)/exportOptions.plist &&
      /usr/libexec/PlistBuddy -c "Add :provisioningProfiles dict" $(Pipeline.Workspace)/exportOptions.plist &&
      /usr/libexec/PlistBuddy -c "Add :provisioningProfiles:$(bundleIdMainApp) string $(profileUUID)" $(Pipeline.Workspace)/exportOptions.plist &&
      /usr/libexec/PlistBuddy -c "Add :signingCertificate string $(APPLE_CERTIFICATE_SIGNING_IDENTITY)" $(Pipeline.Workspace)/exportOptions.plist &&
      /usr/libexec/PlistBuddy -c "Add :signingStyle string manual" $(Pipeline.Workspace)/exportOptions.plist &&
      /usr/libexec/PlistBuddy -c "Add :teamID string $(teamId)" $(Pipeline.Workspace)/exportOptions.plist

- task: CmdLine@2
  inputs:    
    script: |
      echo "Build iOS app"
      cd $(Build.SourcesDirectory)
      
      /usr/bin/xcodebuild -sdk iphoneos -configuration Debug Dev -project /Users/runner/work/1/s/CineRater/CineRater.xcodeproj -scheme CineRater DEV  build -skipPackagePluginValidation CODE_SIGNING_ALLOWED=NO
  displayName: 'Xcode Buid'

- task: CmdLine@2
  inputs:    
    script: |
      echo "Archive the iOS app"
      cd $(Build.SourcesDirectory)
      
      /usr/bin/xcodebuild -sdk iphoneos -configuration Debug Dev -project /Users/runner/work/1/s/CineRater/CineRater.xcodeproj -scheme CineRater DEV archive -allowProvisioningUpdates CODE_SIGN_STYLE=NO -archivePath $(ArchivePath)
  displayName: 'Xcode Archive'
#- task: Xcode@5
  


- task: CopyFiles@2
  displayName: 'Copy files from a source folder to a target folder using patterns matching file paths (not folder paths)'
  inputs:
      SourceFolder: '$(system.defaultworkingdirectory)'
      Contents: '**/*.ipa'
      TargetFolder: '$(build.artifactStagingDirectory)'
      flattenFolders: true

- task: PublishBuildArtifacts@1
  displayName: 'Publish build artifacts to Azure Pipelines or a Windows file share'

- task: AppStoreRelease@1
  displayName: 'Upload the the build to testflight'
  inputs:
    authType: 'ApiKey'
    apiKeyId: '$(appStoreAPIKey)'
    apiKeyIssuerId: '$(appStoreAPIKeyIssuerID)'
    apitoken: '$(appStoreAPIToken)'
    releaseTrack: 'TestFlight'
    appIdentifier: 'com.7peakssoftware.cinerater.CineRater'
    appType: 'iOS'
    #ipaPath: '$(Pipeline.Workspace)/*.ipa'
    ipaPath: '$(build.artifactstagingdirectory)/**/*.ipa'
    shouldSkipWaitingForProcessing: true
    shouldSkipSubmission: true

- task: SonarCloudPrepare@1
  displayName: 'Prepare SonarCloud analysis configuration'
  inputs:
    SonarCloud: 'CineRater_Service'
    organization: 'sawpyaeyadanar'
    scannerMode: 'CLI'
    configMode: 'file'

#- task: SonarCloudAnalyze@1

- task: SonarCloudPublish@1
  displayName: 'Publish SonarCloud Quality Gate result on the Azure Pipelines build result. To be used after the actual analysis. \n This task will poll SonarCloud until the analysis is completed, or until the timeout is reached'
  inputs:
    pollingTimeoutSec: '300'
